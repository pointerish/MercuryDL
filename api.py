import hashlib

# Flask Imports
from flask import Flask
from flask import jsonify
from flask import request

# utils.py Imports 

from utils import is_email
from flask import send_file

# MercuryDL Imports

from mercury_dl import YTDLSession


app = Flask(__name__)


@app.route('/download', methods=['POST'])
def download() -> dict:
    """This function downloads the file from the specified source

    Returns:
        dict: A dict containing either a file name as key and bin file as value
              or a dict containing `status` as key and the the YouTube-DL error message as value.
    """
    session = YTDLSession(request.json['args'], request.json['user'], request.json['api_token'])
    execution = session._download()
    if execution['msg'] == 'Success!':
        return send_file(f'./{execution["file"]}', attachment_filename=execution['file'])
    else:
        return jsonify({'status':execution['msg']})

@app.route('/register-email/<temp_token>', methods=['GET'])
def get_api_token(temp_token) -> dict:
    """This function returns a dictionary containing API Token Details
       after the user has confirmed its email.

    Args:
        temp_token (str): The SHA256 hash generated by `register()` being called.

    Returns:
        dict: dictionary containing API Token Details
    """
    pass


@app.route('/register', methods=['POST'])
def register() -> dict:
    """This function registrates the user and triggers email confirmation procedure.

    Returns:
        dict: Error or Success Message
    """
    email_to_check = request.json['email']
    username       = request.json['username']
    password       = request.json['password']

    if is_email(email_to_check) == True:
        if username != '' and password != '':
            return jsonify({'username':username, 'email':email_to_check, 'password': hashlib.sha256(str.encode(password)).hexdigest()})
        else:
            return jsonify({'error':'Both `username` and `password` need to have a value.'})
    else:
        return jsonify({'error':f'{email_to_check} is not a valid email'})


if __name__ == '__main__':
    app.run()
